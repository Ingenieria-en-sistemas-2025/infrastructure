name: Deploy infra (all services)

on:
  push:
    branches: [ "dev", "main" ]
  workflow_dispatch: {}

jobs:

  validate:
    name: Validate compose/env by branch
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Chequeos bÃ¡sicos
      - name: Basic files check
        run: |
          test -f docker-compose.yml || (echo "docker-compose.yml no encontrado" && exit 1)
          test -f .env || (echo ".env no encontrado" && exit 1)

      # Validar reglas por rama (tags)
      - name: Validate tags per branch
        run: |
          echo "Branch: ${{ github.ref_name }}"
          if [ "${{ github.ref_name }}" = "main" ]; then
            ! grep -R "dev-latest" -n .env docker-compose.yml || (echo "main no puede usar dev-latest" && exit 1)
            for v in SNIPPETS_TAG EXECUTION_TAG TESTS_TAG; do
              val="$(grep -E "^$v=" .env | cut -d= -f2 || true)"
              [ -z "$val" ] || [ "$val" = "latest" ] || { echo " $v debe ser 'latest' en main (es '$val')"; exit 1; }
            done
          elif [ "${{ github.ref_name }}" = "dev" ]; then
            grep -R "dev-latest" -n .env docker-compose.yml > /dev/null || (echo "dev debe usar dev-latest" && exit 1)
            ! grep -E "^(SNIPPETS_TAG|EXECUTION_TAG|TESTS_TAG)=latest$" .env || (echo "dev no debe usar latest" && exit 1)
          else
            echo "Rama no soportada para despliegue" && exit 1
          fi

  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Start DEV VM
        if: github.ref_name == 'dev'
        run: |
          az vm start -g "${{ secrets.AZ_RG_DEV }}" -n "${{ secrets.AZ_VM_DEV_NAME }}"
          for i in {1..24}; do nc -z ${{ secrets.VM_DEV_HOST }} 22 && exit 0; sleep 5; done; exit 1

      - name: Start PROD VM
        if: github.ref_name == 'main'
        run: |
          az vm start -g "${{ secrets.AZ_RG_PROD }}" -n "${{ secrets.AZ_VM_PROD_NAME }}"
          for i in {1..24}; do nc -z ${{ secrets.VM_PROD_HOST }} 22 && exit 0; sleep 5; done; exit 1

      - name: Deploy to DEV (all)
        if: github.ref_name == 'dev'
        uses: appleboy/ssh-action@v1.0.3
        env:
          GHCR_USER: ${{ secrets.GHCR_USER }}
          GHCR_PAT: ${{ secrets.GHCR_PAT }}
        with:
          host: ${{ secrets.VM_DEV_HOST }}
          username: ${{ secrets.VM_SSH_USER }}
          key: ${{ secrets.VM_DEV_SSH_KEY }}
          script: |
            set -e
            cd ~/infrastructure
            git fetch --all
            git checkout dev || true
            git pull || true
            if [ -n "${GHCR_USER}" ] && [ -n "${GHCR_PAT}" ]; then
              echo "$GHCR_PAT" | docker login ghcr.io -u "$GHCR_USER" --password-stdin
            fi
            docker network create printscript-net || true
            docker compose pull
            docker compose up -d --remove-orphans
            docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Ports}}"
            docker image prune -f

      - name: Deploy to PROD (all)
        if: github.ref_name == 'main'
        uses: appleboy/ssh-action@v1.0.3
        env:
          GHCR_USER: ${{ secrets.GHCR_USER }}
          GHCR_PAT: ${{ secrets.GHCR_PAT }}
        with:
          host: ${{ secrets.VM_PROD_HOST }}
          username: ${{ secrets.VM_SSH_USER }}
          key: ${{ secrets.VM_PROD_SSH_KEY }}
          script: |
            set -e
            cd ~/infrastructure
            git fetch --all
            git checkout main || true
            git pull || true
            if [ -n "${GHCR_USER}" ] && [ -n "${GHCR_PAT}" ]; then
              echo "$GHCR_PAT" | docker login ghcr.io -u "$GHCR_USER" --password-stdin
            fi
            docker network create printscript-net || true
            docker compose pull
            docker compose up -d --remove-orphans
            docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Ports}}"
            docker image prune -f